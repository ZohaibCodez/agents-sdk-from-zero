# -*- coding: utf-8 -*-
"""03_agents_ins.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LRqX9bAQw6fMFQ3VeJF_DRbbZwbsrItb

# Agent Instructions
"""

!pip install -Uq openai-agents

import nest_asyncio
nest_asyncio.apply()

from agents import Agent,Runner,AsyncOpenAI,OpenAIChatCompletionsModel,set_tracing_disabled,RunResult,RunContextWrapper
from google.colab import userdata

set_tracing_disabled(True)
gemini_api_key = userdata.get('GEMINI_API_KEY')

external_client = AsyncOpenAI(
    api_key = gemini_api_key,
    base_url = "https://generativelanguage.googleapis.com/v1beta/openai/"
)

model = OpenAIChatCompletionsModel(
    openai_client = external_client,
    model = "gemini-2.0-flash"
)

import asyncio

"""## Basic String Instructions"""

agent_basic:Agent = Agent(
    name = "Basic Agent",
    instructions = "You are a helpful assistant that provides short and concise answers",
    model = model,
)

async def main():
  result:RunResult = await Runner.run(agent_basic, "What is the meaning of life?")
  print(result.final_output)

asyncio.run(main())

"""## Detailed String Agent"""

agent_detailed:Agent = Agent(
    name = "Detailed Agent",
    instructions="""You are an expert Python developer.
    - Always provide working code examples
    - Explain your reasoning step by step
    - Keep responses under 200 words
    - Use best practices and modern Python syntax
    """,
    model = model
)

async def main():
  result:RunResult =await Runner.run(agent_detailed,"Tell me about Asynchronous Programming")
  print(result.final_output)

asyncio.run(main())

"""## Simple Callable Instructions"""

# making function that gives dynamic instructions when called
def dynamic_instructions(ctx:RunContextWrapper[None],agent:Agent) -> str:
  print("RECEIVED CONTEXT : ", ctx)
  print("RECEIVED AGENT : ", agent)
  return f"You are a {agent.name}. Responed user queries shortly and concisely"

agent_callable:Agent = Agent(
    name = "Dynamic Agent",
    instructions = dynamic_instructions,
    model = model
)

async def main():
  result:RunResult =await Runner.run(agent_callable, "What is the meaning of life?")
  print(result.final_output)

asyncio.run(main())

"""## Context Aware Callable Instructions"""

!pip install -Uq pydantic

## making simple context just for demo usage
from pydantic import BaseModel

class Message(BaseModel):
  role:str
  content:str

class Messages(BaseModel):
  messages:list[Message]

def context_aware_instructions(ctx:RunContextWrapper[Messages],agent:Agent) -> str:
  # print("RECEIVED CONTEXT : ", ctx)
  # print("RECEIVED AGENT : ", agent)

  message_count = len(ctx.context.messages)

  if message_count == 0:
      return "You are a friendly assistant. Introduce yourself and ask how you can help."
  elif message_count < 3:
      return "You are a helpful assistant. Be encouraging and detailed in your responses."
  else:
      return "You are an experienced assistant. Be concise but thorough."

agent_context_aware:Agent = Agent(
    name = "Context Aware Agent",
    instructions = context_aware_instructions,
    model = model,
)

async def main():
  ctx0 = Messages(messages=[])
  result1:RunResult = await Runner.run(agent_context_aware, "Hi",context = ctx0)
  print("AGENT INSTRUCTIONS:", context_aware_instructions(RunContextWrapper(ctx0), agent_context_aware))
  print(result1.final_output)

  ctx2 = Messages(messages=[Message(role="user", content="Hi"),
                            Message(role="assistant", content="Hello!")])
  result2:RunResult = await Runner.run(agent_context_aware, "Tell me about Asynchronous Programming",context = ctx2)
  print("AGENT INSTRUCTIONS:", context_aware_instructions(RunContextWrapper(ctx2), agent_context_aware))
  print(result2.final_output)

  ctx4 = Messages(messages=[Message(role="user", content="Hi"),
                            Message(role="assistant", content="Hello!"),
                            Message(role="user", content="How do I code a loop?"),
                            Message(role="assistant", content="Hereâ€™s how...")])
  result3:RunResult = await Runner.run(agent_context_aware, "Hi",context = ctx2)
  print("AGENT INSTRUCTIONS:", context_aware_instructions(RunContextWrapper(ctx4), agent_context_aware))
  print(result3.final_output)

asyncio.run(main())

"""## Async Callable Instructions"""

from datetime import datetime

async def async_instructions(ctx:RunContextWrapper[None],agent:Agent):
  await asyncio.sleep(0.1)
  current_time = asyncio.get_event_loop().time()
  parsed_time = datetime.fromtimestamp(current_time)

  return f"""You are {agent.name}, an AI assistant with real-time capabilities.Current timestamp: {parsed_time}
  Provide helpful and timely responses."""

agent_async:Agent = Agent(
    name = "Async Agent",
    instructions = async_instructions,
    model = model,
)

async def main():
  result:RunResult =await Runner.run(agent_async, "What time it is?")
  print("AGENT INSTRUCTIONS : ",await async_instructions(RunContextWrapper(None), agent_async))
  print(result.final_output)

asyncio.run(main())

"""## Stateful Callable Instructions"""

class instruction_generator:
  def __init__(self):
    self.interaction_count = 0

  def __call__(self,ctx:RunContextWrapper[None],agent:Agent):
    self.interaction_count+=1

    if self.interaction_count == 1:
      return "You are a learning assistant. This is our first interaction - be welcoming!"
    elif self.interaction_count <= 3:
      return f"You are a learning assistant. This is interaction #{self.interaction_count} - build on our conversation."
    else:
      return f"You are an experienced learning assistant. We've had {self.interaction_count} interactions - be efficient."

instruction_gen = instruction_generator()

agent_stateful:Agent = Agent(
    name = "Stateful Agent",
    instructions = instruction_gen,
    model = model,
)

async def main():
    for i in range(4):
        result = await Runner.run(
            agent_stateful, f"Question {i+1}: Tell me about Python"
        )
        print(f"[Interaction {i+1}]:", result.final_output[:100] + "...")

asyncio.run(main())